local M = {}

M.config = function()
  lvim.builtin.which_key.mappings = {
    -- ["`"] = { "<cmd>Telescope find_files<CR>", "Find file" },
    ["<space>"] = { "<cmd>Telescope find_files<CR>", "Find file" },
    ["."] = { "<cmd>Telescope file_browser<CR>", "Browse files" },
    [","] = { "<cmd>Telescope buffers show_all_buffers=true<CR>", "Switch buffer" },
    ["/"] = { "<cmd>Telescope live_grep<CR>", "Search a word" },
    [":"] = { "<cmd>Telescope commands<CR>", "Commands" },
    ["h"] = { ":Man", "Manpage" },
    -- ["m"] = { "Save" },
    -- ["v"] = { "Save" },
    ["b"] = {
      name = "+buffers",
      ["c"] = { "<cmd>BufferLinePickClose<CR>", "Close current buffer" },
      ["f"] = { "Format buffer" },
      ["]"] = { "<cmd>BufferLineCycleNext<CR>", "Next buffer" },
      ["n"] = { "<cmd>BufferLineCycleNext<CR>", "Next buffer" },
      ["g"] = { "<cmd>BufferLinePick<CR>", "Goto buffer" },
      ["["] = { "<cmd>BufferLineCyclePrev<CR>", "Previous buffer" },
      ["p"] = { "<cmd>BufferLineCycleNext<CR>", "Previous buffer" },
      ["H"] = { "<cmd>BufferLineMovePrev<CR>", "Move previous"},
      ["L"] = { "<cmd>BufferLineMoveNext<CR>", "Move next"},
      ["i"] = { "<cmd>Telescope buffers<CR>", "Buffer list"},
    },
    ["c"] = {
      name = "+code",
      -- ["i"] = { "Start a REPL" },
      -- ["r"] = { "Run current file" },
      -- ["b"] = { "Compile project" },
      -- ["c"] = { "Compile and run project" },
      -- ["h"] = {
      --   "Run restclient on the line that the cursor is currently on",
      -- },
      ["d"] = { "<cmd>lua vim.lsp.buf.definition()<CR>", "Jump to definition" },
      ["D"] = { "<cmd>lua vim.lsp.buf.declaration()<CR>", "Jump to declaration" },
      ["I"] = { "<cmd>lua vim.lsp.buf.implementation()<CR>", "Jump to implementation"},
      ["r"] = { "<cmd>lua vim.lsp.buf.references()<CR>", "Jump to references" },
      ["s"] = { "<cmd>SymbolsOutline<CR>", "Open symbol"},
      ["f"] = { "<cmd>lua vim.lsp.buf.formatting()<cr>", "Format" },
      ["j"] = {
        "<cmd>lua vim.lsp.diagnostic.goto_next({popup_opts = {border = lvim.lsp.popup_border}})<cr>",
        "Next Diagnostic",
      },
      ["k"] = {
        "<cmd>lua vim.lsp.diagnostic.goto_prev({popup_opts = {border = lvim.lsp.popup_border}})<cr>",
        "Prev Diagnostic",
      },
      ["g"] = {
        name = "+debug",
        ["b"] = { "<cmd>lua require('dap').toggle_breakpoint()<CR>", "Toggle breakpoint on current line" },
        ["c"] = { "<cmd>lua require('dap').continue()<CR>", "Start (or continue) a debug session" },
        ["t"] = { "<cmd>lua⋅require('dap').disconnect()", "Terminate debug session" },
        ["e"] = { "<cmd>lua require('dapui').eval()<CR>", "Evaluate word under cursor" },
        ["s"] = { "<cmd>lua require('dapui').eval()<CR>", "Evaluate selection" },
      },
      ["l"] = {
        name = "+lsp",
        ["a"] = { "<cmd>lua vim.lsp.buf.code_action()<CR>", "Code actions" },
        ["i"] = { "<cmd>LspInfo<cr>", "Lsp Info" },
        ["d"] = { "<cmd>lua vim.lsp.buf.type_definition()<CR>", "Show type definition" },
        ["l"] = { "<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>", "Show line diagnostics" },
        ["r"] = { "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename" },
        ["q"] = { "<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>", "Diagnostics into location list" },
      },
    },
    ["f"] = {
      name = "+file",
      ["c"] = { "Edit Neovim configuration" },
      ["n"] = { "<cmd>enew<CR>", "Create a new unnamed buffer" },
      ["f"] = { "<cmd>Telescope find_files<CR>", "Find files" },
      ["t"] = { "<cmd>Telescope help_tags<CR>", "Help tags" },
      ["r"] = { "<cmd>Telescope oldfiles<CR>", "Recently opened files" },
      ["w"] = { "<cmd>SudaWrite<CR>", "Write file with sudo permissions" },
      ["R"] = { "<cmd>SudaRead<CR>", "Re-open file with sudo permissions" },
    },
    ["g"] = {
      name = "+git",
      ["o"] = { "Open LazyGit" },
      ["l"] = { '<cmd>TermExec cmd="git pull"<CR>', "Pull" },
      ["p"] = { '<cmd>TermExec cmd="git push"<CR>', "Push" },
      ["S"] = { "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", "Stage hunk" },
      ["s"] = { "<cmd>Telescope git_status<CR>", "Status" },
      ["u"] = { "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", "Undo stage hunk" },
      ["R"] = { "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", "Reset buffer" },
      ["r"] = { "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", "Reset hunk" },
      ["h"] = { "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", "Preview hunk" },
      ["b"] = { "<cmd>lua require 'gitsigns'.blame_line()<cr>", "Blame line" },
      ["B"] = { "<cmd>Telescope git_branches<CR>", "Branches" },
      ["c"] = { "<cmd>Telescope git_commits<CR>", "Commits" },
      ["d"] = { "<cmd>Gitsigns diffthis HEAD<cr>", "Git Diff" },
      ["n"] = { "[[:call search('^(@@ .* @@|[<=>|]{7}[<=>|]@!)', 'W')<cr>]]", "Next merge conflict" },
      ["N"] = { "[[:call search('^(@@ .* @@|[<=>|]{7}[<=>|]@!)', 'bW')<cr>]]", "Prev merge conflict" },
    },
    ["P"] = {
      name = "+plugins",
      ["c"] = { "<cmd>PackerClean<CR>", "Clean disabled or unused plugins" },
      ["C"] = { "<cmd>PackerCompile<CR>", "Compile your plugins changes" },
      ["i"] = { "<cmd>PackerInstall<cr>", "Install missing plugins" },
      ["p"] = { "<cmd>PackerProfile<CR>", "Profile the time taken loading your plugins" },
      ["s"] = { "<cmd>PackerSync<CR>", "Sync your plugins" },
      ["S"] = { "<cmd>PackerStatus<CR>", "Plugins status" },
      ["r"] = { "<cmd>lua require('lvim.plugin-loader').recompile()<cr>", "Re-compile" },
    },
    ["q"] = {
      name = "+quit/sessions",
      ["d"] = { "<cmd>lua require('persistence').stop()<cr>", "Quit without saving session" },
      ["l"] = { "<cmd>lua require('persistence').load(last=true)<cr>", "Restore last session" },
      ["s"] = { "<cmd>lua require('persistence').load()<cr>", "Restore for current dir" },
    },
    ["s"] = {
      name = "+search",
      ["g"] = { "<cmd>Telescope live_grep<CR>", "Grep" },
      ["G"] = { "<cmd>lua require('telescope').extensions.live_grep_raw.live_grep_raw()<CR>", "Grep raw"},
      ["b"] = { "<cmd>Telescope current_buffer_fuzzy_find<CR>", "Buffer" },
      ["f"] = { "<cmd>Telescope find_files<cr>", "Find File" },
      ["r"] = { "<cmd>Telescope oldfiles<cr>", "Recent Open File" },
      ["s"] = { "<cmd>Telescope lsp_document_symbols<CR>", "Goto symbol" },
      ["h"] = { "<cmd>Telescope command_history<CR>", "Command history" },
      ["m"] = { "<cmd>Telescope marks<CR>", "Jump to mark" },
      ["k"] = { "<cmd>Telescope keymaps<cr>", "Keymaps" },
      ["C"] = { "<cmd>Telescope commands<cr>", "Commands" },
      ["l"] = { "<cmd>lua⋅require('user.configurations.telescope').grep_last_search({layout_strategy⋅=⋅\"vertical\"})<cr>", "Last⋅Search" },
      ["z"] = { "<cmd>lua require('user.configurations.telescope').search_only_certain_files()<cr>", "Certain Filetype" },
      ["p"] = { "<cmd>lua require('user.configurations.telescope').project_search()<cr>", "Project" },
    },
    ["w"] = {
      name = "+windows",
      ["w"] = { "<C-W>p", "Other window" },
      ["d"] = { "<C-W>c", "Delete window" },
      ["2"] = { "<C-W>v", "Layout double columns" },
      ["h"] = { "<C-W>h", "Window left" },
      ["j"] = { "<C-W>j", "Window below" },
      ["l"] = { "<C-W>l", "Window right" },
      ["k"] = { "<C-W>k", "Window up" },
      ["H"] = { "<C-W>H", "Move window left" },
      ["J"] = { "<C-W>J", "Move window below" },
      ["K"] = { "<C-W>K", "Move window right" },
      ["L"] = { "<C-W>L", "Move window up" },
      ["="] = { "<C-W>=", "Balance window" },
      ["s"] = { "<C-W>s", "Split window below" },
      ["v"] = { "<C-W>v", "Split window right" },
      ["r"] = {
        name = "+resize",
        ["H"] = { "<C-W>5<", "Expand window left" },
        ["J"] = { "<cmd>resize +5<CR>", "Expand window below" },
        ["L"] = { "<C-W>5>", "Expand window right" },
        ["K"] = { "<cmd>resize -5<CR>", "Expand window up" },
      }
    },
    ["o"] = {
      name = "+open",
      ["b"] = { "<cmd>lua require('dapui').toggle()<CR>", "Debugging UI " },
      ["d"] = { "<cmd>Alpha<CR>", "Start screen" },
      ["e"] = { "<cmd>NvimTreeToggle<CR>", "Tree Explorer" },
      ["r"] = { "<cmd>RnvimrToggle<CR>", "Ranger File Browser" },
      ["m"] = { "<cmd>MinimapToggle<CR>", "Minimap" },
      ["s"] = { "<cmd>SymbolsOutline<CR>", "Symbols" },
      ["t"] = { "<cmd>ToggleTerm<CR>", "Terminal" },
      ["p"] = { "<cmd>Telescope projects<CR>", "Projects" },
    },
    ["j"] = {
      name = "+jumps",
      ["a"] = { "<C-^>", "Alternate file" },
      ["k"] = { "<C-o>", "jump forward" },
      ["f"] = { "<C-i>", "jump back" },
      ["p"] = { ":pop<CR>", "pop tag stack" },
      ["t"] = { ":tag<CR>", "jump to tag" },
    },
    ["r"] = {
      name = "Replace",
      ["f"] = { "<cmd>lua require('spectre').open_file_search()<cr>", "Current Buffer" },
      ["p"] = { "<cmd>lua require('spectre').open()<cr>", "Project" },
      ["w"] = { "<cmd>lua require('spectre').open_visual({select_word=true})<cr>", "Replace Word" },
    },
    ["z"] = { "<cmd>ZenMode<Cr>", "Zen" },
    ["?"] = { "<cmd>Cheat<CR>", "Cheat.sh" }
  }
end

return M
